# 1. (1.0) Segundo os conceitos de programa√ß√£o e da linguagem Python que aprendemos, relacione as colunas:
# ( a ) [‚Äúum‚Äù, ‚Äúdois‚Äù, ‚Äútr√™s‚Äù] = Lista
# ( b ) != = Operador l√≥gico
# ( c ) # = Coment√°rios em Python
# ( d ) if...elif...else = Estrutura condicional
# ( e ) (0,) = Tupla
# ( f ) 10011001b = N√∫mero em formato bin√°rio
# ( g ) float = Tipo de dado
# ( h ) while = Estrutura de repeti√ß√£o
# ( i ) += = Operador acumulativo
# ( j ) { }  = Dicion√°rio

# C, B, J, I, E, G, F, D, A, H

# 2. (1.0) Com suas palavras, defina o que √© uma fun√ß√£o. E explique: quais s√£o as principais vantagens em usar
# fun√ß√µes em seu c√≥digo?

# Fun√ß√µes s√£o blocos de c√≥digo aut√¥nomos que realizam tarefas definidas. Suas principais vantagens s√£o:
# Modularidade: permitindo dividir o c√≥digo em partes menores e independentes do bloco de c√≥digo principal;
# Reutiliza√ß√£o de c√≥digo: evitando repeti√ß√£o usando blocos de c√≥digo para realizar atividades que se repetem;
# Abstra√ß√£o: ocultando detalhes complexos;
# Facilidade de depura√ß√£o: Onde ao isolar partes do c√≥digo, a leitura se torna mais f√°cil e o c√≥digo mais compreensiv√©l, facilitando o trabalho em equipe.
# Fun√ß√µes tornam o c√≥digo mais organizado, reutiliz√°vel, e f√°cil de se trabalhar

# 3. (1.0) Qual seria a principal vantagem, em termos de pesquisa de dados, em um sistema que faz uso de um
# dicion√°rio como banco de dados no lugar de uma lista?

# A principal vantagem de usar um dicion√°rio em vez de uma lista √© sua capacidade de realizar pesquisas de forma mais eficiente.
# Enquanto em uma lista √© necess√°rio percorrer todos os elementos para encontrar um valor espec√≠fico, em um dicion√°rio √© poss√≠vel acessar diretamente o valor desejado por meio da chave da c√©lula. Isso resulta em um tempo de busca mais r√°pido, especialmente quando existe uma base de dados grande. E as chaves dos dicion√°rios tamb√©m podem ser valores customizados para f√°cil acesso futuro.

# 4. (1.0) Defina, com suas palavras, o que √© uma fun√ß√£o recursiva
# Uma fun√ß√£o recursiva √© uma fun√ß√£o que chama a s√≠ mesma, assim, ao inv√©s de ter uma fun√ß√£o com um loop dentro, a fun√ß√£o chama a s√≠ mesma at√© que um parametro desejado seja cumprido, assim, retornando o valor desejado. Essa abordagem simplifica a l√≥gica do c√≥digo, permitindo resolver problemas de maneira eficiente.

# 5. (1.5) Crie uma fun√ß√£o recursiva que inverte o texto dado como par√¢metro. Usar no prot√≥tipo o seguinte
# cabe√ßalho:

def inverter(texto):
    if len(texto) == 0:  # Caso o input seja vazio
        return texto
    else:
        # itera por todas as letras, passando a √∫ltima letra para a primeira posi√ß√£o
        return inverter(texto[1:]) + texto[0]


print(inverter('Texto'))  # output -> otxeT


# 6. (1.5) Uma matriz superior √© aquela que tem os elementos da diagonal principal e todos acima dela iguais a
# 1, sendo que os demais s√£o 0. Isto se d√° pela defini√ß√£o:
# A = [Aij | 1 se j >= i, caso contr√°rio 0]
# Exemplo: matriz diagonal superior de ordem 4:
# ùê¥4 = [
# 1 1 1 1
# 0 1 1 1
# 0 0 1 1
# 0 0 0 1
# ]
# Considerando esta defini√ß√£o acima, elabore um programa em Python que solicita ao usu√°rio a ordem m da
# matriz, e gera uma matriz Am superior.

def gerarMatrizSuperior():
    tamanho = int(input("Digite a ordem da matriz: "))

    matriz = [[0] * tamanho for _ in range(tamanho)]  # Inicializa a matriz com zeros para altera√ß√£o futura

    for i in range(tamanho):
        for j in range(i, tamanho):
            matriz[i][j] = 1

    return matriz

print(gerarMatrizSuperior())

# 7. (1.5) Criar um sistema composto por tr√™s fun√ß√µes:
# Fun√ß√£o imprimir ‚Äì recebe como par√¢metro um texto t e usa a fun√ß√£o print para imprimi-lo.
# Fun√ß√£o reduzir ‚Äì recebe um texto t e um n√∫mero de caracteres n e devolve um texto composto pelo n
# primeiros caracteres de t.
# Fun√ß√£o decidir ‚Äì recebe um texto t e um n√∫mero n. Caso tenha mais de n caracteres, chama a fun√ß√£o reduzir(t,
# n), e imprime o retorno com a fun√ß√£o imprimir(t). Caso contr√°rio, chama direto a fun√ß√£o imprimir(t). Obs.:
# os valores iniciais de t e n devem ser solicitados fora das fun√ß√µes ao usu√°rio e, para realizar as devidas
# impress√µes, deve ser chamada a fun√ß√£o decidir(t, n).
class Exercicio7():
    def imprimir(t):
        print(t)

    def reduzir(t, n):
        return t[:n]

    def decidir(t, n):
        if len(t) > n:
            texto_reduzido = Exercicio7.reduzir(t, n)
            Exercicio7.imprimir(texto_reduzido)
        else:
            Exercicio7.imprimir(t)

t = input("Digite um texto: ")
n = int(input("Digite o n√∫mero de caracteres: "))

Exercicio7.decidir(t, n)


# 8. (1.5) Criar uma fun√ß√£o em Python que recebe um dicion√°rio. Esta fun√ß√£o separa o dicion√°rio em duas listas:
# chaves e valores, e retorna ambas em uma tupla.

def separar_dict(dict):
    chaves = list(dict.keys())
    valores = list(dict.values())
    return chaves, valores

# Exemplo de uso
dictExemplo = {"a": 1, "b": 2, "c": 3}
print(separar_dict(dictExemplo))
